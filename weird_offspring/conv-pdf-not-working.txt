async function downloadConversationAsPDF() {
  // Extract the conversation ID from the current URL
  const conversationId = window.location.pathname.split('/').pop();
  const apiUrl = `https://claude.ai/api/organizations/4d1fa379-40e3-4b62-84e1-41c6cf04af71/chat_conversations/${conversationId}?tree=True&rendering_mode=raw`;

  try {
    // Fetch the conversation data from the API
    const response = await fetch(apiUrl);
    const conversationData = await response.json();

    // Extract the conversation title and start date
    const conversationTitle = conversationData.title || 'Untitled Conversation';
    const conversationStartDate = new Date(conversationData.created_at).toLocaleString();

    // Extract the conversation messages
    const messages = conversationData.chat_messages.map(message => ({
      role: message.sender,
      content: message.text,
      date: new Date(message.created_at).toLocaleString()
    }));

    // Convert the conversation messages to HTML
    const conversationHtml = messages.map(message => `
      <div class="message">
        <strong>${message.role} (${message.date}):</strong>
        <div class="message-content">${message.content}</div>
      </div>
    `).join('');

    // Create a new window with the conversation content
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>${conversationTitle}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
            }
            .message {
              margin-bottom: 20px;
            }
            .message strong {
              font-weight: bold;
            }
            .message-content {
              white-space: pre-wrap;
              word-wrap: break-word;
            }
          </style>
        </head>
        <body>
          <h1>${conversationTitle}</h1>
          <p>Conversation started on: ${conversationStartDate}</p>
          ${conversationHtml}
        </body>
      </html>
    `);

    // Wait for the content to render before printing
    printWindow.onload = () => {
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
      }, 500);
    };
  } catch (error) {
    console.error('Error downloading conversation:', error);
  }
}

downloadConversationAsPDF();
